/*
 * This Java source file was generated by the Gradle 'init' task.
 */
 package docker;
import org.apache.commons.codec.binary.Base64;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


public class App {
    public static void main(String[] args){
    	
        //ncp
        args = new String[3];
    	
        //docker rmi -f `docker images -q` DOCKER image delete all
        //args[0]: registry name
        //args[1]: access key
        //args[2]: secret key
        
        args[0] = "";
        args[1] = "";
        args[2] = "";
        String uri = "/ncr/api/v2/repositories/"+args[0];
        String region = "kr";
        String endpoint = args[0]+"."+region+".ncr.ntruss.com";

        //aws
        String[] aws = new String[5];
        aws[0] = ""; //ECS repository name
        aws[1] = ""; //AccessKey
        aws[2] = ""; //SecretKey
        aws[3] = ""; //region
        aws[4] = ""; //account id

        StringBuilder response = new StringBuilder();
        try{
            //Call Image List
            String timestamp = String.valueOf(System.currentTimeMillis());
            URL url = new URL("https://ncr.apigw.ntruss.com" + uri);
            HttpURLConnection con = (HttpURLConnection)url.openConnection();
            con.setRequestMethod("GET");

            con.setRequestProperty("x-ncp-apigw-timestamp", timestamp);
            con.setRequestProperty("x-ncp-iam-access-key", args[1]);
            con.setRequestProperty("x-ncp-apigw-signature-v2", makeSignature(timestamp, uri, args[1], args[2]));

            int responseCode = con.getResponseCode();
            BufferedReader br;
            if(responseCode==200) { // 정상 호출
                br = new BufferedReader(new InputStreamReader(con.getInputStream()));
            } else {  // 에러 발생
                br = new BufferedReader(new InputStreamReader(con.getErrorStream()));
            }
            
            String[] images = downloadImages(args, endpoint, br);

            uploadImages(aws, images, endpoint);
            br.close();
        } catch(Exception e){
            System.out.println(e);
        }
    }
    private static void uploadImages(String[] aws, String[] images, String endpoint) throws Exception{
        
        //aws[0] = //ECS repository name
        //aws[1] = //AccessKey
        //aws[2] = //SecretKey
        //aws[3] = //region
        //aws[4] = //account id

        String[] cmd = {"/bin/sh", "-c", "apt install awscli & aws configure set aws_access_key_id "+aws[1] 
        + "& aws configure set aws_secret_access_key "+aws[2]+ "& (aws ecr get-login-password --region "+aws[3]
        + " | docker login --username AWS --password-stdin "+aws[4]+".dkr.ecr."+aws[3]+".amazonaws.com)"};
        Process p = Runtime.getRuntime().exec(cmd);
        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));

        String s;
        while((s=br.readLine())!=null)
                System.out.println(s);

        

        for(int i=0; i<images.length; i++){
            System.out.println(images[i]);
            cmd[2] = "docker tag "+endpoint+"/"+images[i]+" "+aws[4]+".dkr.ecr."+aws[3]+".amazonaws.com/"+aws[0]+":"+images[i];
            p = Runtime.getRuntime().exec(cmd);
            br = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while((s=br.readLine())!=null)
                System.out.println(s);
            
            

            cmd[2] = "docker push " + aws[4]+".dkr.ecr."+aws[3]+".amazonaws.com/"+aws[0]+":"+images[i];
            System.out.println(cmd[2]);
            p = Runtime.getRuntime().exec(cmd);
            br = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while((s=br.readLine())!=null)
                System.out.println(s);
        }
    }
    private static String[] downloadImages(String[] args, String endpoint, BufferedReader br) throws Exception{
    	//result parsing
        JSONParser parser = new JSONParser();
        JSONObject jsonObj = (JSONObject)parser.parse(br);
        JSONArray jsonArr = (JSONArray)jsonObj.get("results");
        

        String[] cmd = {"/bin/sh", "-c", "docker login"+args[1]};
        Process p = Runtime.getRuntime().exec(cmd);
        String s;
        br = new BufferedReader(new InputStreamReader(p.getInputStream()));
        
        while((s=br.readLine())!=null)
        	System.out.println(s);
        	
      	String[] images = new String[jsonArr.size()];
        for(int i=0; i<jsonArr.size(); i++){
            //store image name
            String image = (String)((JSONObject)jsonArr.get(i)).get("name");
            images[i]=image;
            cmd[2] = "docker pull "+endpoint+"/"+image;
            p = Runtime.getRuntime().exec(cmd);
            br = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while((s=br.readLine())!=null)
                System.out.println(s);
            System.out.println(image);
        }
        return images;
    }
    private static String makeSignature(String timestamp, String uri, String accessKey, String secretKey){
        //call api
        String space = " ";               // one space
        String newLine = "\n";               // new line
        String method = "GET";               // method
        System.out.println(accessKey + " " + secretKey);
        String message = new StringBuilder()
            .append(method)
            .append(space)
            .append(uri)
            .append(newLine)
            .append(timestamp)
            .append(newLine)
            .append(accessKey)
            .toString();
        try{
            SecretKeySpec signingKey = new SecretKeySpec(secretKey.getBytes("UTF-8"), "HmacSHA256");
            Mac mac = Mac.getInstance("HmacSHA256");
            mac.init(signingKey);

            byte[] rawHmac = mac.doFinal(message.getBytes("UTF-8"));
            String encodeBase64String = Base64.encodeBase64String(rawHmac);
            return encodeBase64String;
        }catch(Exception e){

        }
        return "";
    }

}
